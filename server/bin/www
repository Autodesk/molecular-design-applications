#!/usr/bin/env node

/**
 * Add this extra property to Errors right away
 */
if (!('toJSON' in Error.prototype)) {
  Object.defineProperty(Error.prototype, 'toJSON', {
    value: function toJSON() {
      const alt = {};

      Object.getOwnPropertyNames(this).forEach((key) => {
        alt[key] = this[key];
      }, this);

      return alt;
    },
    configurable: true,
    writable: true
  });
}

let fluentSender;

function handleUncaughtException(err) {
  /* Just log it no matter what first */
  console.error(err);
  let stack = null;
  try {
    stack = err.stack;
  } catch (e) {}

  // You can't pass the error object directly, fluent doesn't like it.
  let errorJson = null;
  try {
    errorJson = err.toJSON();
  } catch (e) {
    console.error(e);
  }

  let errorString = null;
  try {
    errorString = err.toString();
  } catch (e) {
    console.error(e);
  }

  const errObj = {
    stack,
    errorJson,
    errorString,
    message: 'crash',
  };

  console.error(JSON.stringify(errObj, null, ''));
  // Ensure crash is logged to fluent before exiting.
  try {
    if (!(process.env.FLUENT === '0' || process.env.FLUENT === 'false')) {
      if (fluentSender) {
        try {
          fluentSender.emit('mst', errObj, null, () => {
            process.exit(1);
          });
        } catch (e) {
          process.exit(1);
        }
      }
    } else {
      process.exit(1);
    }
  } catch (e) {
    process.exit(1);
  }
}

/**
 * Crash handler
 */
process.on('uncaughtException', handleUncaughtException);
process.on('unhandledRejection', (err, promise) => {
  // See Promise.onPossiblyUnhandledRejection for parameter documentation
  console.error('unhandledRejection', err, promise);
  handleUncaughtException(err);
});

/* Load the logger first, since we use it early */
require('dotenv').config();
const log = require('../utils/log');

/**
 * Module dependencies.
 */
const http = require('http');
const httpProxy = require('http-proxy');
const retry = require('bluebird-retry');
const app = require('../main/server');
const dbUtils = require('../utils/db_utils');
fluentSender = require('../utils/fluent_sender');
const testUtils = require('../test/test_utils');

const AppSession = require('../services/app_session');
const WebsocketHandler = require('../services/websockets');
const Notifications = require('../services/notifications');
const db = require('../main/db');
const WebsocketServer = require('../main/websocket_server');

/**
 * Get port from environment and store in Express.
 */
const DEFAULT_PORT = 4000;
let port = parseInt(process.env.PORT, 10);
if (isNaN(port) || port < 0) {
  port = DEFAULT_PORT;
}
app.set('port', port);
process.env.PORT = port;

/**
 * Event listener for HTTP server 'error' event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // This should never happen when running in docker
      log.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */
function onListening(addr) {
  return () => {
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    log.debug(`Listening on ${bind}`);
    if (process.env.NODE_ENV === 'development') {
      // Wait a bit, sometimes docker takes a while
      log.debug('Running tests...');
      retry(testUtils.runAllTests, { max_tries: 20, interval: 1000 })
        .then((blob) => {
          const status = blob.success ? 'OK' : 'Failed';
          const error = blob.error != null ? JSON.stringify(blob.error) : '';
          log.info(`Internal functional tests: ${status} ${error}`);
          if (process.env.TRAVIS === '1') {
            process.exit(blob.success ? 0 : -1);
          }
        })
        .catch((err) => {
          log.error({ status: 'Test failed:', error: JSON.stringify(err) });
          if (process.env.TRAVIS === '1') {
            process.exit(-1);
          }
        });
    }
  };
}

const config = require('../main/config'); // This is a promise to deliver all db etc config

/**
  Before we create the server, initialize the database (seeds, migrations)
*/
config.redis
  .then(redis => dbUtils.initialize(redis))
  .then(() => {
    /**
     * Create HTTP server.
     */
    const server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening(server.address()));
    server.timeout = 8 * 60 * 1000; // 8 minutes
    config.server.resolve(server);
  })
  .then(() => new WebsocketServer({ config }))
  .then(() => {
    /* Create all the remaining services */
    global.config.db.resolve(db);
    global.config.session.resolve(new AppSession({ config }));
    global.config.wsHandler.resolve(new WebsocketHandler({ config }));
    global.config.notifications.resolve(new Notifications({ config }));
  });

/**
 * Proxy requests to port 9000 to the CCC server
 */
if (process.env.CCC === 'ccc:9000') {
  httpProxy.createProxyServer({ target: 'http://ccc:9000' }).listen(9000);
}
